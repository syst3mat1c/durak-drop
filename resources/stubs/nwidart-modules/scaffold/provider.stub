<?php

namespace $NAMESPACE$;

use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Eloquent\Factory;

class $CLASS$ extends ServiceProvider
{
    /** @var bool */
    protected $defer = false;

    /**
     * @return void
     */
    public function boot()
    {
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->registerFactories();
        $this->registerObservers();
        $this->registerRepositories();
        $this->loadMigrationsFrom(__DIR__ . '/../$MIGRATIONS_PATH$');
    }

    /**
     * @return void
     */
    public function register()
    {
        //
    }

    /**
     * @return void
     */
    protected function registerObservers()
    {

    }

    /**
     * @return void
     */
    protected function registerRepositories()
    {

    }

    /**
     * @return void
     */
    protected function registerConfig()
    {
        $this->publishes([
            __DIR__.'/../$PATH_CONFIG$/config.php' => config_path('$LOWER_NAME$.php'),
        ], 'config');
        $this->mergeConfigFrom(
            __DIR__.'/../$PATH_CONFIG$/config.php', '$LOWER_NAME$'
        );
    }

    /**
     * @return void
     */
    public function registerViews()
    {
        $viewPath = resource_path('views/modules/$LOWER_NAME$');

        $sourcePath = __DIR__.'/../$PATH_VIEWS$';

        $this->publishes([
            $sourcePath => $viewPath
        ],'views');

        $this->loadViewsFrom(array_merge(array_map(function ($path) {
            return $path . '/modules/$LOWER_NAME$';
        }, \Config::get('view.paths')), [$sourcePath]), '$LOWER_NAME$');
    }

    /**
     * @return void
     */
    public function registerTranslations()
    {
        $langPath = resource_path('lang/modules/$LOWER_NAME$');

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, '$LOWER_NAME$');
        } else {
            $this->loadTranslationsFrom(__DIR__ .'/../$PATH_LANG$', '$LOWER_NAME$');
        }
    }

    /**
     * @return void
     */
    public function registerFactories()
    {
        if (! app()->environment('production')) {
            app(Factory::class)->load(__DIR__ . '/../$FACTORIES_PATH$');
        }
    }

    /**
     * @return array
     */
    public function provides()
    {
        return [];
    }
}
